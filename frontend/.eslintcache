[{"E:\\Test_Task_Yellow\\frontend\\src\\index.js":"1","E:\\Test_Task_Yellow\\frontend\\src\\App.js":"2","E:\\Test_Task_Yellow\\frontend\\src\\reportWebVitals.js":"3","E:\\Test_Task_Yellow\\frontend\\src\\components\\NotFound.jsx":"4","E:\\Test_Task_Yellow\\frontend\\src\\components\\SignIn.jsx":"5","E:\\Test_Task_Yellow\\frontend\\src\\components\\User.jsx":"6","E:\\Test_Task_Yellow\\frontend\\src\\components\\ModalError.jsx":"7","E:\\Test_Task_Yellow\\frontend\\src\\reducers\\index.js":"8","E:\\Test_Task_Yellow\\frontend\\src\\components\\Register.jsx":"9","E:\\Test_Task_Yellow\\frontend\\src\\utils\\setAuthToken.js":"10","E:\\Test_Task_Yellow\\frontend\\src\\reducers\\errorReducer.js":"11","E:\\Test_Task_Yellow\\frontend\\src\\reducers\\authReducer.js":"12","E:\\Test_Task_Yellow\\frontend\\src\\actions\\types.js":"13","E:\\Test_Task_Yellow\\frontend\\src\\actions\\authActions.js":"14"},{"size":895,"mtime":1609963296763,"results":"15","hashOfConfig":"16"},{"size":1309,"mtime":1610561922616,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":230,"mtime":1609963662084,"results":"19","hashOfConfig":"16"},{"size":4093,"mtime":1610560571024,"results":"20","hashOfConfig":"16"},{"size":1175,"mtime":1610560989923,"results":"21","hashOfConfig":"16"},{"size":697,"mtime":1610557671850,"results":"22","hashOfConfig":"16"},{"size":215,"mtime":1610555898784,"results":"23","hashOfConfig":"16"},{"size":5638,"mtime":1610562302766,"results":"24","hashOfConfig":"16"},{"size":346,"mtime":1610555978764,"results":"25","hashOfConfig":"16"},{"size":254,"mtime":1610555868882,"results":"26","hashOfConfig":"16"},{"size":569,"mtime":1610555842228,"results":"27","hashOfConfig":"16"},{"size":137,"mtime":1610555732326,"results":"28","hashOfConfig":"16"},{"size":1329,"mtime":1610562780990,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1gnjrhs",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"E:\\Test_Task_Yellow\\frontend\\src\\index.js",[],["65","66"],"E:\\Test_Task_Yellow\\frontend\\src\\App.js",["67","68"],"import React ,{ useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\n\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport { useDispatch } from \"react-redux\";\n\nimport SignIn from \"./components/SignIn\";\nimport User from \"./components/User\";\nimport NotFound from \"./components/NotFound\";\nimport Register from \"./components/Register\";\nimport \"./App.css\";\n\n\n\nfunction App() {\n  const dispatch = useDispatch();\n\nif (localStorage.jwtToken) {\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  const decoded = jwt_decode(token);\n  dispatch(setCurrentUser(decoded));\n  const currentTime = Date.now() / 1000; \n  if (decoded.exp < currentTime) {\n\n    dispatch(logoutUser());\n    window.location.href = \"./login\";\n  }\n}\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/login\">\n          <SignIn />\n        </Route>\n        <Route exact path=\"/register\">\n          <Register />\n        </Route>\n        <Switch>\n          <Route exact path=\"/user\">\n            <User />\n          </Route >\n        </Switch>\n        <Route component={NotFound} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\Test_Task_Yellow\\frontend\\src\\reportWebVitals.js",[],"E:\\Test_Task_Yellow\\frontend\\src\\components\\NotFound.jsx",[],"E:\\Test_Task_Yellow\\frontend\\src\\components\\SignIn.jsx",["69","70","71"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport ModalError from \"./ModalError\";\r\nimport { Container, Col, Row, Form, Button } from \"react-bootstrap\";\r\nimport \"../styles/form.css\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { loginUser  } from \"../actions/authActions\";\r\n\r\nconst SignIn = ({ auth, errorsV }) => {\r\n  const dispatch = useDispatch();\r\n  const [show, setShow] = useState(false);\r\n  const [errorM, setErrorM] = useState(\"\");\r\n  let history = useHistory();\r\n\r\n  const {\r\n    values,\r\n    handleSubmit,\r\n    submitCount,\r\n    getFieldProps,\r\n    setValues,\r\n    touched,\r\n    errors,\r\n    setFieldValue,\r\n  } = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n    validate() {\r\n      const error = {};\r\n      if (touched.email && !values.email) {\r\n        error.email = \"Required\";\r\n      } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n      ) {\r\n        error.email = \"Invalid email address\";\r\n      }\r\n      if (touched.password && !values.password) {\r\n        error.password = \"Required\";\r\n      } else if (values.password.length <= 3) {\r\n        error.password = \"Must be more than 3 characters\";\r\n      }\r\n      return error;\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(loginUser(values));\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n   if(auth && auth.isAuthenticated){\r\n    history.push(\"/user\")\r\n   }\r\n  });\r\n\r\n  /*useEffect(() => {\r\n    if (message) {\r\n      const err = (message && message.message) || message.password.message;\r\n      setErrorM(err);\r\n      setShow(true);\r\n    }\r\n  }, [message]);*/\r\n\r\n  const toRegister = () => {\r\n    history.push(\"/register\");\r\n  };\r\n\r\n  const body = (\r\n    <Container fluid=\"md\">\r\n      <Row>\r\n        <Col className=\"colForm\">\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Enter email\"\r\n                {...getFieldProps(\"email\")}\r\n                required\r\n                isValid={touched[\"email\"] && !errors[\"email\"]}\r\n                isInvalid={!!errors[\"email\"]}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors[\"email\"]}\r\n              </Form.Control.Feedback>\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                name=\"password\"\r\n                {...getFieldProps(\"password\")}\r\n                placeholder=\"Password\"\r\n                isValid={touched[\"password\"] && !errors[\"password\"]}\r\n                isInvalid={\r\n                  !!errors[\"password\"] //|| (message && message[\"password\"])\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors[\"password\"]}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Login\r\n            </Button>\r\n\r\n            <br />\r\n          </Form>\r\n          <Row>\r\n            <Col>\r\n            <br />\r\n            <div>Dont have account? </div>\r\n            <Button variant=\"primary\" onClick={toRegister}>\r\n              Register\r\n            </Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {body}\r\n      <ModalError\r\n        show={show}\r\n        setShow={setShow}\r\n        message={errorM}\r\n        setErrorM={setErrorM}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  const { auth } = state;\r\n  return {\r\n    auth,\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(SignIn);\r\n","E:\\Test_Task_Yellow\\frontend\\src\\components\\User.jsx",[],"E:\\Test_Task_Yellow\\frontend\\src\\components\\ModalError.jsx",[],["72","73"],"E:\\Test_Task_Yellow\\frontend\\src\\reducers\\index.js",[],"E:\\Test_Task_Yellow\\frontend\\src\\components\\Register.jsx",["74","75","76"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport ModalError from \"./ModalError\";\r\nimport { Container, Col, Row, Form, Button } from \"react-bootstrap\";\r\nimport \"../styles/form.css\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { registerUser  } from \"../actions/authActions\";\r\n\r\nconst Register = ({ auth }) => {\r\n  const dispatch = useDispatch();\r\n  const [show, setShow] = useState(false);\r\n  const [errorM, setErrorM] = useState(\"\");\r\n  let history = useHistory();\r\n\r\n  const {\r\n    values,\r\n    handleSubmit,\r\n    submitCount,\r\n    getFieldProps,\r\n    setValues,\r\n    touched,\r\n    errors,\r\n    setFieldValue,\r\n  } = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      name:\"\",\r\n      password: \"\",\r\n      password2:\"\",\r\n    },\r\n    validate() {\r\n      const errors = {};\r\n      if (touched.email && !values.email) {\r\n        errors.email = \"Required\";\r\n      } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n      ) {\r\n        errors.email = \"Invalid email address\";\r\n      }\r\n      if (touched.password && !values.password) {\r\n        errors.password = \"Required\";\r\n      } else if (values.password.length <= 3) {\r\n        errors.password = \"Must be more than 3 characters\";\r\n      }\r\n      if (touched.password2 && !values.password2) {\r\n        errors.password2 = \"Required\";\r\n      } else if (values.password2.length <= 3) {\r\n        errors.password2 = \"Must be more than 3 characters\";\r\n      }\r\n      if (values.password !== values.password2){\r\n        errors.password = \"пароли должны совподать\";\r\n        errors.password2 = \"пароли должны совподать\";\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(registerUser(values ,history));\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if(auth && auth.isAuthenticated){\r\n     history.push(\"/user\")\r\n    }\r\n   });\r\n\r\n /* useEffect(() => {\r\n    if (message) {\r\n      const err = (message && message.message) || message.password.message;\r\n      setErrorM(err);\r\n      setShow(true);\r\n    }\r\n  }, [message]);\r\n*/\r\n  const body = (\r\n    <Container fluid=\"md\">\r\n      <Row>\r\n        <Col className=\"colForm\">\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Enter email\"\r\n                {...getFieldProps(\"email\")}\r\n                required\r\n                isValid={touched[\"email\"] && !errors[\"email\"]}\r\n                isInvalid={!!errors[\"email\"]}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors[\"email\"]}\r\n              </Form.Control.Feedback>\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicName\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Enter name\"\r\n                {...getFieldProps(\"name\")}\r\n                required\r\n                isValid={touched[\"name\"] && !errors[\"name\"]}\r\n                isInvalid={!!errors[\"name\"]}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors[\"name\"]}\r\n              </Form.Control.Feedback>\r\n              <Form.Text className=\"text-muted\">\r\n             Please enter Username \r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                name=\"password\"\r\n                {...getFieldProps(\"password\")}\r\n                placeholder=\"Password\"\r\n                isValid={touched[\"password\"] && !errors[\"password\"]}\r\n                isInvalid={\r\n                  !!errors[\"password\"] //|| (message && message[\"password\"])\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors[\"password\"]}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password Retry</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                name=\"password2\"\r\n                {...getFieldProps(\"password2\")}\r\n                placeholder=\"Password retry\"\r\n                isValid={touched[\"password2\"] && !errors[\"password2\"]}\r\n                isInvalid={\r\n                  !!errors[\"password2\"] //|| (message && message[\"password2\"])\r\n                }\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors[\"password2\"]}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n            <br />\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n  \r\n  return (\r\n    <>\r\n      {body}\r\n      <ModalError\r\n        show={show}\r\n        setShow={setShow}\r\n        message={errorM}\r\n        setErrorM={setErrorM}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  const { auth } = state;\r\n  return {\r\n    auth\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(Register);\r\n","E:\\Test_Task_Yellow\\frontend\\src\\utils\\setAuthToken.js",[],"E:\\Test_Task_Yellow\\frontend\\src\\reducers\\errorReducer.js",["77"],"import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}","E:\\Test_Task_Yellow\\frontend\\src\\reducers\\authReducer.js",["78"],"import { SET_CURRENT_USER, USER_LOADING } from \"../actions/types\";\r\n\r\nconst isEmpty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: {},\r\n  loading: false\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: !isEmpty(action.payload),\r\n        user: action.payload\r\n      };\r\n    case USER_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","E:\\Test_Task_Yellow\\frontend\\src\\actions\\types.js",[],"E:\\Test_Task_Yellow\\frontend\\src\\actions\\authActions.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":26},{"ruleId":"83","severity":1,"message":"87","line":6,"column":3,"nodeType":"85","messageId":"86","endLine":6,"endColumn":11},{"ruleId":"83","severity":1,"message":"88","line":19,"column":5,"nodeType":"85","messageId":"86","endLine":19,"endColumn":16},{"ruleId":"83","severity":1,"message":"89","line":21,"column":5,"nodeType":"85","messageId":"86","endLine":21,"endColumn":14},{"ruleId":"83","severity":1,"message":"90","line":24,"column":5,"nodeType":"85","messageId":"86","endLine":24,"endColumn":18},{"ruleId":"79","replacedBy":"91"},{"ruleId":"81","replacedBy":"92"},{"ruleId":"83","severity":1,"message":"88","line":19,"column":5,"nodeType":"85","messageId":"86","endLine":19,"endColumn":16},{"ruleId":"83","severity":1,"message":"89","line":21,"column":5,"nodeType":"85","messageId":"86","endLine":21,"endColumn":14},{"ruleId":"83","severity":1,"message":"90","line":24,"column":5,"nodeType":"85","messageId":"86","endLine":24,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":5,"column":1,"nodeType":"95","endLine":12,"endColumn":2},{"ruleId":"93","severity":1,"message":"94","line":11,"column":1,"nodeType":"95","endLine":27,"endColumn":2},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'submitCount' is assigned a value but never used.","'setValues' is assigned a value but never used.","'setFieldValue' is assigned a value but never used.",["96"],["97"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]